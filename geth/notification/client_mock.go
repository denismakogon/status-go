// Code generated by MockGen. DO NOT EDIT.
// Source: geth/notification/client_interface.go

// Package notification is a generated GoMock package.
package notification

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// NewRegIdsMsg mocks base method
func (m *MockClient) NewRegIdsMsg(tokens []string, body interface{}) Client {
	ret := m.ctrl.Call(m, "NewRegIdsMsg", tokens, body)
	ret0, _ := ret[0].(Client)
	return ret0
}

// NewRegIdsMsg indicates an expected call of NewRegIdsMsg
func (mr *MockClientMockRecorder) NewRegIdsMsg(tokens, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRegIdsMsg", reflect.TypeOf((*MockClient)(nil).NewRegIdsMsg), tokens, body)
}

// Send mocks base method
func (m *MockClient) Send() (*Response, error) {
	ret := m.ctrl.Call(m, "Send")
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockClientMockRecorder) Send() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send))
}

// SetNotificationPayload mocks base method
func (m *MockClient) SetNotificationPayload(payload *Payload) Client {
	ret := m.ctrl.Call(m, "SetNotificationPayload", payload)
	ret0, _ := ret[0].(Client)
	return ret0
}

// SetNotificationPayload indicates an expected call of SetNotificationPayload
func (mr *MockClientMockRecorder) SetNotificationPayload(payload interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNotificationPayload", reflect.TypeOf((*MockClient)(nil).SetNotificationPayload), payload)
}
